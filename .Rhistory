main="Car Distribution",
names.arg = rownames(teste), las=2, cex=1)
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), las=2, cex=1)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_educacao]), 2))
ggcorrplot(cor(df_teresina[, lab.corr]), type = "lower", outline.color = "white",
lab = TRUE, lab_size = 2)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
df_teresina_efa = subset(df_teresina, select = -c(UF, municipality, code, ID))
KMO(df_teresina_efa)
fa.parallel(df_teresina_efa, fa="fa")
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
EFA5$loadings
fa.diagram(EFA3$loadings)
fviz_eig(PCA, addlabels = TRUE)
PCA$loadings
data.frame(PCA$loadings)
data.frame(PCA$loadings[, 1:2])
data.frame(PCA$loadings[, 1:4])
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
EFA5$loadings
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
teste = data.frame(PCA$loadings[, 1:4])
teste = data.frame(PCA$loadings[, 1:4])
teste$Comp.4
teste = data.frame(PCA$loadings[, 1:4])
sum(teste$Comp.4)
teste = data.frame(PCA$loadings[, 1:4])
teste = data.frame(PCA$loadings[, 1:4])
teste
screeplot(EFA3, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
barplot(subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N')))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_educacao]), 2))
ggcorrplot(cor(df_teresina[, lab.corr]), type = "lower", outline.color = "white",
lab = TRUE, lab_size = 2)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[1,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[2,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[3,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[4,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[5,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[10,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[1,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[1,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[20:25,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[15:20,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$loadings[10:15,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA$call
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
PCA
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
data.frame(summary(PCA))
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[1]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[3]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[10]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[7]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[8]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[6]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[4]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[5]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[3]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2, 1:1]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2, 1:2]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2, 1]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2,]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
data.frame(summary(PCA)[2])
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)[2]
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
df_teresina_efa = subset(df_teresina, select = -c(UF, municipality, code, ID))
KMO(df_teresina_efa)
fa.parallel(df_teresina_efa, fa="fa")
summary(EFA5)
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
summary(EFA5)
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
EFA = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA
EFA = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA$PVAL
fa.diagram(EFA4$loadings)
teste = data.frame(PCA$loadings[, 1:4])
sum(teste$Comp.1)
teste = data.frame(PCA$loadings[, 1:4])
data.frame(PCA$loadings[, 1:4])
df_teresina
View(df_teresina)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID,
area_de_ponderacao, N)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID,
area_de_ponderacao, N)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
df_teresina_efa = subset(df_teresina, select = -c(UF, municipality, code, ID,
area_de_ponderacao, N))
KMO(df_teresina_efa)
fa.parallel(df_teresina_efa, fa="fa")
EFA = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA
EFA = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA$PVAL
EFA = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA$PVAL
fa.diagram(EFA4$loadings)
fa.diagram(EFA$loadings)
data.frame(PCA$loadings[, 1:3])
data.frame(EFA$loadings[, 1:3])
sum(data.frame(PCA$loadings[, 1:3]))
sum(data.frame(EFA$loadings[, 1:3]))
pca_index = data.frame(PCA$loadings[, 1:3])
summary(pca_index)
efa_index = data.frame(EFA$loadings[, 1:3])
summary(efa_index)
pca_index = data.frame(PCA$loadings[, 1:3])
median(pca_index)
pca_index = data.frame(PCA$loadings[, 1:3])
sum(pca_index)
pca_index = data.frame(PCA$loadings[, 1:3])
mean(pca_index)
pca_index = data.frame(PCA$loadings[, 1:3])
median(as.matrix(pca_index))
pca_index = data.frame(PCA$loadings[, 1:3])
summary(pca_index)
median(as.matrix(pca_index))
efa_index = data.frame(EFA$loadings[, 1:3])
summary(efa_index)
median(as.matrix(efa_index))
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_moradia]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_emprego]), 2))
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_educacao]), 2))
ggcorrplot(cor(df_teresina[, lab.corr]), type = "lower", outline.color = "white",
lab = TRUE, lab_size = 2)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID,
area_de_ponderacao, N)))
PCA = princomp(df_teresina_scaled)
summary(PCA)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
df_teresina_efa = subset(df_teresina, select = -c(UF, municipality, code, ID,
area_de_ponderacao, N))
KMO(df_teresina_efa)
fa.parallel(df_teresina_efa, fa="fa")
EFA = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA
EFA = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA$PVAL
fa.diagram(EFA$loadings)
pca_index = data.frame(PCA$loadings[, 1:3])
summary(pca_index)
median(as.matrix(pca_index))
efa_index = data.frame(EFA$loadings[, 1:3])
summary(efa_index)
median(as.matrix(efa_index))
