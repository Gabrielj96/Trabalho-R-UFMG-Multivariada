fa.diagram(EFA$loadings)
KMO(df_teresina_efa)
KMO(df_teresina_efa)
fa.parallel(df_teresina_efa, fa="fa")
EFA = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA
EFA = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA
EFA = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA$PVAL
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$PVAL
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$PVAL
fa.diagram(EFA3$loadings)
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
fviz_eig(PCA, addlabels = TRUE)
EFA4
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$PVAL
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$STATISTIC
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$factors
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[, 1:2]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[, 1:3]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[, 1:5]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[3]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[2]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[1]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[4]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[3]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[1:4]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[,1:10]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[,1:4]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[,1:3]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings[2,1:3]
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$loadings
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$criteria
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$PVAL
EFA4$loadings
fviz_eig(EFA4, addlabels = TRUE)
EFA4 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA4$PVAL
EFA3$PVAL
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
EFA5$loadings
EFA5 = factanal(df_teresina_efa, factors = 5, scores = 'regression', nstart = 100)
EFA4 = factanal(df_teresina_efa, factors = 4, scores = 'regression', nstart = 100)
EFA3 = factanal(df_teresina_efa, factors = 3, scores = 'regression', nstart = 100)
EFA5$PVAL
EFA4$PVAL
EFA3$PVAL
PCA$scores
data.frame(PCA$scores)
View(df_teresina)
pca_score = data.frame(PCA$scores)
pca_score
pca_score = data.frame(PCA$scores)
scale(pca_score$Comp.4)
pca_score = data.frame(PCA$scores)
rescale(pca_score$Comp.4)
pca_score = data.frame(PCA$scores)
scale(pca_score$Comp.4)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(subset(df_teresina, select = -c(UF, municipality, code, ID)))
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(subset(df_teresina, select = -c(UF, municipality, code, ID)))
fviz_eig(PCA, addlabels = TRUE)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
fviz_eig(PCA, addlabels = TRUE)
df_teresina_scaled = subset(df_teresina, select = -c(UF, municipality, code, ID))
PCA = princomp(df_teresina_scaled, scale=F)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = prcomp(df_teresina_scaled)
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = prcomp(df_teresina_scaled)
fviz_eig(PCA, addlabels = TRUE)
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = prcomp(df_teresina_scaled)
PCA$rotation
df_teresina_scaled = scale(subset(df_teresina, select = -c(UF, municipality, code, ID)))
PCA = princomp(df_teresina_scaled)
fviz_eig(PCA, addlabels = TRUE)
fviz_pca_var(PCA, col.var = "cos2", gradient.cols = c("red", "grey", "green"))
summary(PCA)
EFA3$scores
EFA3$scores$Factor3
scores = EFA3$scores
scores = EFA3$scores
scores
scores = data.frame(EFA3$scores)
scores
scores = data.frame(EFA3$scores)
sum(scores)
PCA$loadings
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
{r}
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE, hjust = 1)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA, addlabels = TRUE)
abline(h = 1, lty = 2)
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
choice="eigenvalue",
main="Figure 2") +
geom_hline(yintercept=1,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
choice="eigenvalue",
main="Figure 2") +
geom_hline(yintercept=1,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=1,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
geom_hline(yintercept=5,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE +
geom_hline(yintercept=5,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=5,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=10,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
fviz_eig(PCA,
addlabels = TRUE,
choice="eigenvalue",
main="Figure 2") +
geom_hline(yintercept=1,
linetype="dashed",
color = "red")
screeplot(PCA, main = 'Scree Plot (dashed line = Kaiser rule)', type = 'l')
abline(h = 1, lty = 2)
fviz_eig(PCA,
addlabels = TRUE,
main="Figure 2") +
geom_hline(yintercept=7,
linetype="dashed",
color = "red")
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
plot(data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2)))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
sf.obj$`Comp. 1` = PCA$scores[, 1]
merge.shp = raster::shapefile(
x = paste0('_out/shapefiles/Belo Horizonte AP.shp'))
merge.shp = raster::shapefile(
x = paste0('shapefiles/Belo Horizonte AP.shp'))
merge.shp = raster::shapefile(
x = paste0('shapefiles/Teresina AP.shp'))
# convertendo para sf
sf.obj = st_as_sf(merge.shp)
# ordenando por AP
sf.obj = sf.obj[order(sf.obj$COD_AREA_P), ]
sf.obj$COD_AREA_P
merge.shp = raster::shapefile(
x = paste0('shapefiles/Teresina AP.shp'))
# convertendo para sf
sf.obj = st_as_sf(merge.shp)
# ordenando por AP
sf.obj = sf.obj[order(sf.obj$COD_AREA_P), ]
sf.obj
data.frame(sf.obj)
View(df_teresina)
sf.obj$code
sf.obj$CD_APONDE
sf.obj[order(sf.obj$CD_APONDE), ]
sf.obj = sf.obj[order(sf.obj$COD_AREA_P), ]
sf.obj = sf.obj[order(sf.obj$CD_APONDE), ]
sf.obj = sf.obj[order(sf.obj$CD_APONDE), ]
sf.obj
merge.shp = raster::shapefile(
x = paste0('shapefiles/Teresina AP.shp'))
# convertendo para sf
sf.obj = st_as_sf(merge.shp)
# ordenando por AP
sf.obj = sf.obj[order(sf.obj$CD_APONDE), ]
sf.obj$`Comp. 1` = PCA$scores[, 1]
# classificando em quintis
sf.obj$`Comp. 1_cat` = quant.class(sf.obj$`Comp. 1`, c = 5)
# invocando ggplot
p = ggplot(data = sf.obj) +
# raster geom
geom_sf(aes(fill = `Comp. 1_cat`)) +
# tema
theme(
# legenda
legend.title = element_text(face = 'bold'),
legend.key = element_blank(),
legend.background = element_rect(colour = 'black'),
# painéis
panel.background = element_blank(),
panel.border = element_rect(colour = 'black', fill = NA),
# título
plot.title = element_text(hjust = 0.5, face = 'bold')
) +
# título
ggtitle(paste('Scores da 1ª Componente da PCA')) +
# legenda
guides(fill = guide_legend('Comp. 1')) +
# paleta de cores
scale_fill_brewer(palette = 'RdYlBu') +
# barra de escala (ggspatial)
ggspatial::annotation_scale() +
# rosa dos ventos (ggsn)
ggsn::north(sf.obj)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2., main="Car Distribution",
xlab="Number of Gears")
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2., main="Car Distribution",
xlab="Number of Gears",
legend = rownames(teste))
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2., main="Car Distribution",
xlab="Number of Gears",
names.arg = rownames(teste))
rownames(teste)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), horiz=TRUE)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), horiz = TRUE, cex.names=0.8)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), horiz = TRUE, las=2)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), las=2)
lab.corr_saneamento = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL')
lab.corr_moradia = c('P_MATPAREDES', 'P_OVERCROWDING')
lab.corr_emprego = c('P_DESEMP', 'P_FORTRAB')
lab.corr_educacao = c('P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
lab.corr = c('P_AGUAENC', 'P_AGUAENCDENTRO', 'P_AGUAREDE', 'P_ESGOTOPUB', 'P_ESGOTOQUAL',
'P_MATPAREDES', 'P_OVERCROWDING',
'P_DESEMP', 'P_FORTRAB',
'P_ENSFUND', 'P_ENSMED', 'P_ENSSUP', 'P_FREQESCOLA')
teste = data.frame(as.matrix(colMeans(df_teresina[, lab.corr_saneamento]), 2))
barplot(teste$as.matrix.colMeans.df_teresina...lab.corr_saneamento....2.,
main="Car Distribution",
names.arg = rownames(teste), las=2, cex=1)
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
library(readr)
library(dplyr)
library(FactoMineR)
library(factoextra)
library(corrplot)
library(ggplot2)
library(tidyverse)
library(ggcorrplot)
library(ggspatial)
#library(ggsn)
library(raster)
#library(rgdal)
library(sf)
library(sp)
library(GGally)
library(stats)
library(maps)
library(psych)
set.seed(111)
options(scipen = 999)
df_teresina = read.csv("SES_Teresina.csv")
df_teresina$ID = df_teresina$area_de_ponderacao %% 100
sum(df_teresina$N)
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
subset(df_teresina[order(df_teresina$N), ], select = c('ID', 'N'))
